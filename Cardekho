import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from google.colab import files
uploaded = files.upload()
df = pd.read_csv('cardekho_dataset.csv')
print("Dataset Loaded Successfully!")
print(df.head())
print("\nMissing Values Before Imputation:")
print(df.isnull().sum())
columns_to_fill = ['mileage', 'engine', 'max_power', 'seats', 'selling_price']
for col in columns_to_fill:
    df[col].fillna(df[col].median(), inplace=True)print("\nMissing Values After Imputation:")
print(df.isnull().sum())
le = LabelEncoder()
categorical_cols = ['brand', 'model', 'seller_type', 'fuel_type', 'transmission_type']
for col in categorical_cols:
    df[col] = le.fit_transform(df[col].astype(str))
if 'vehicle_age' in df.columns:
    df['vehicle_age'] = df['vehicle_age'].apply(lambda x: int(x.split()[0]) if isinstance(x, str) else x)

print("\nSample Processed Data:")
print(df.head())
plt.figure(figsize=(10, 6))
sns.histplot(df['selling_price'], kde=True, color='green', bins=30)
plt.title('Selling Price Distribution')
plt.xlabel('Selling Price')
plt.ylabel('Density')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()
numeric_df = df.select_dtypes(include=np.number)
plt.figure(figsize=(12, 8))
sns.heatmap(numeric_df.corr(), annot=True, cmap='viridis', fmt=".2f", linewidths=0.5)
plt.title('Feature Correlation Matrix')
plt.show()

X = df.drop('selling_price', axis=1)
y = df['selling_price']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=24)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train.select_dtypes(include=np.number))
X_test_scaled = scaler.transform(X_test.select_dtypes(include=np.number))

rf_model = RandomForestRegressor(n_estimators=200, random_state=24, max_depth=10)
rf_model.fit(X_train_scaled, y_train)
y_pred_rf = rf_model.predict(X_test_scaled)
print("\nRandom Forest Model Evaluation:")
print("Mean Absolute Error:", round(mean_absolute_error(y_test, y_pred_rf), 1))
print("Mean Squared Error:", round(mean_squared_error(y_test, y_pred_rf), 1))
print("Root Mean Squared Error:", round(np.sqrt(mean_squared_error(y_test, y_pred_rf)), 1))
print("R² Score (Accuracy):", round(r2_score(y_test, y_pred_rf) * 100, 1), "%")
lr_model = LinearRegression()
lr_model.fit(X_train_scaled, y_train)
y_pred_lr = lr_model.predict(X_test_scaled)

print("\nLinear Regression Model Evaluation:")
print("Mean Absolute Error:", round(mean_absolute_error(y_test, y_pred_lr), 1))
print("Mean Squared Error:", round(mean_squared_error(y_test, y_pred_lr), 1))
print("Root Mean Squared Error:", round(np.sqrt(mean_squared_error(y_test, y_pred_lr)), 1))
print("R² Score (Accuracy):", round(r2_score(y_test, y_pred_lr) * 100, 1), "%")
